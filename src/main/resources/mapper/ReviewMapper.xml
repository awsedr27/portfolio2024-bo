<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.portfolioBo.review.dao.ReviewDao">
    <select id="selectReviewList" parameterType="com.portfolioBo.review.dto.ReviewDto$ReviewListQuery" resultType="com.portfolioBo.review.dto.ReviewDto$ReviewListResult">
        SELECT 
			r.review_id,
			p.name as productName,
			u.nickname as userNickName,
			r.use_yn,
			r.rating,
			r.comment,
			r.reply,
			r.create_date,
			r.modify_date
        FROM 
            review r
        LEFT OUTER JOIN orderItems oi ON oi.order_item_id =r.order_item_id 
        LEFT OUTER JOIN product p ON p.product_id =oi.product_id 
        LEFT OUTER JOIN orders o ON o.order_id =oi.order_id 
        LEFT OUTER JOIN users u ON u.user_id =o.user_id 
        WHERE
            1=1
            <if test="productName != null and productName != ''">
                AND p.name LIKE CONCAT('%', #{productName}, '%')
            </if>
            <if test="userNickName != null and userNickName != ''">
                AND u.nickname LIKE CONCAT('%', #{userNickName}, '%')
            </if>
            <if test="useYn != null and useYn != ''">
                AND r.use_yn = #{useYn}
            </if>
			<if test='replyYn == "Y"'>
			    AND r.reply IS NOT NULL
			</if>
			<if test='replyYn == "N"'>
			    AND r.reply IS NULL
			</if>
            ORDER BY create_date DESC
			LIMIT #{paging.startRecordIndex}, #{paging.pageSize}
    </select>
    <select id="selectReviewListCnt" parameterType="com.portfolioBo.review.dto.ReviewDto$ReviewListCntQuery" resultType="Integer">
        SELECT 
        	COUNT(*)
        FROM 
            review r
        LEFT OUTER JOIN orderItems oi ON oi.order_item_id =r.order_item_id 
        LEFT OUTER JOIN product p ON p.product_id =oi.product_id 
        LEFT OUTER JOIN orders o ON o.order_id =oi.order_id 
        LEFT OUTER JOIN users u ON u.user_id =o.user_id 
        WHERE
            1=1
            <if test="productName != null and productName != ''">
                AND p.name LIKE CONCAT('%', #{productName}, '%')
            </if>
            <if test="userNickName != null and userNickName != ''">
                AND u.nickname LIKE CONCAT('%', #{userNickName}, '%')
            </if>
            <if test="useYn != null and useYn != ''">
                AND r.use_yn = #{useYn}
            </if>
			<if test='replyYn == "Y"'>
			    AND r.reply IS NOT NULL
			</if>
			<if test='replyYn == "N"'>
			    AND r.reply IS NULL
			</if>
    </select>
    <select id="selectReview" parameterType="Integer" resultType="com.portfolioBo.review.dto.ReviewDto">
        SELECT 
			review_id,
			order_item_id,
			use_yn,
			rating,
			comment,
			reply,
			create_date,
			modify_date
        FROM 
            review
        WHERE
        	review_id=#{reviewId}
    </select>
    <select id="selectReviewDetail" parameterType="Integer" resultType="com.portfolioBo.review.dto.ReviewDto$ReviewDetailResult">
        SELECT 
			r.review_id,
			p.name as productName,
			u.nickname as userNickName ,
			r.use_yn,
			r.rating,
			r.comment,
			r.reply,
			r.create_date,
			r.modify_date
        FROM 
            review r
        LEFT OUTER JOIN orderItems oi ON oi.order_item_id = r.order_item_id
        LEFT OUTER JOIN product p ON p.product_id =oi.product_id 
        LEFT OUTER JOIN orders o ON o.order_id =oi.order_id 
        LEFT OUTER JOIN users u ON u.user_id =o.user_id 
        WHERE
        	r.review_id=#{reviewId}
    </select>
    <update id="updateReview" parameterType="com.portfolioBo.review.dto.ReviewDto$ReviewUpdateQuery">
	    UPDATE review
		SET
	    reply = #{reply},
	    use_yn = #{useYn}
		WHERE
	    review_id = #{reviewId};
    </update>
</mapper>